/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package is3calendar;

import calendar_ex.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.*;
import javax.swing.JLabel;


/**
 *
 * @author Arthur Bigeard
 */
public class IS3Calendar extends javax.swing.JFrame {
    private static CalendarEx cal;
    private static String fileName;
    private static String displayMode;
        
    private static CalendarDate startDate;
    private static CalendarDate endDate;
    private static GregorianCalendar currentMonthDate;
    /**
     * Creates new form Calendar
     */
    public IS3Calendar() {
        initComponents();
        cal = new CalendarEx();
        fileName = "events2.ser";
        displayMode = "Day";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addAppointmentFrame = new javax.swing.JFrame();
        addAppointmentFrameEndTimeTextInput = new javax.swing.JTextField();
        addAppointmentFrameStartTimeTextInput = new javax.swing.JTextField();
        addAppointmentFrameRecurrenceComboList = new javax.swing.JComboBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        addAppointmentFrameDescriptionTextarea = new javax.swing.JTextArea();
        addAppointmentFrameLocationTextInput = new javax.swing.JTextField();
        addAppointmentFrameConfirmButton = new javax.swing.JButton();
        addAppointmentFrameDateTextInput = new javax.swing.JTextField();
        addAppointmentFrameCategoryTextInput = new javax.swing.JTextField();
        editAppointmentFrame = new javax.swing.JFrame();
        editAppointmentFrameLocationTextInput = new javax.swing.JTextField();
        editAppointmentFrameCategoryTextInput = new javax.swing.JTextField();
        editAppointmentFrameDateTextInput = new javax.swing.JTextField();
        editAppointmentFrameStartTimeTextInput = new javax.swing.JTextField();
        editAppointmentFrameEndTimeTextInput = new javax.swing.JTextField();
        editAppointmentFrameConfirmButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        editAppointmentFrameDescriptionTextarea = new javax.swing.JTextArea();
        editAppointmentFrameRecurrenceComboList = new javax.swing.JComboBox();
        commandLineSubmit = new javax.swing.JButton();
        commandLineInput = new javax.swing.JTextField();
        addAppointmentButton = new javax.swing.JButton();
        monthDisplayPane = new javax.swing.JTabbedPane();
        dayDisplayPane = new javax.swing.JScrollPane();
        dayDisplayTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        addAppointmentFrame.setMinimumSize(new java.awt.Dimension(500, 500));

        addAppointmentFrameEndTimeTextInput.setText("End time (hh:mm)");

        addAppointmentFrameStartTimeTextInput.setText("Start time (hh:mm)");

        addAppointmentFrameRecurrenceComboList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Daily", "Weekly", "Two weekly", "Four weekly" }));

        addAppointmentFrameDescriptionTextarea.setColumns(20);
        addAppointmentFrameDescriptionTextarea.setRows(5);
        addAppointmentFrameDescriptionTextarea.setText("Description");
        jScrollPane5.setViewportView(addAppointmentFrameDescriptionTextarea);

        addAppointmentFrameLocationTextInput.setText("Location");
        addAppointmentFrameLocationTextInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentFrameLocationTextInputActionPerformed(evt);
            }
        });

        addAppointmentFrameConfirmButton.setText("Confirm");
        addAppointmentFrameConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentFrameConfirmButtonActionPerformed(evt);
            }
        });

        addAppointmentFrameDateTextInput.setText("Date (DD/MM/YYYY)");

        addAppointmentFrameCategoryTextInput.setText("Category");

        javax.swing.GroupLayout addAppointmentFrameLayout = new javax.swing.GroupLayout(addAppointmentFrame.getContentPane());
        addAppointmentFrame.getContentPane().setLayout(addAppointmentFrameLayout);
        addAppointmentFrameLayout.setHorizontalGroup(
            addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addAppointmentFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addAppointmentFrameConfirmButton)
                .addGap(41, 41, 41))
            .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addGroup(addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addAppointmentFrameRecurrenceComboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(addAppointmentFrameLocationTextInput)
                        .addComponent(addAppointmentFrameCategoryTextInput, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                    .addComponent(addAppointmentFrameEndTimeTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addAppointmentFrameStartTimeTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addAppointmentFrameDateTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addAppointmentFrameLayout.setVerticalGroup(
            addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(addAppointmentFrameLocationTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAppointmentFrameCategoryTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addAppointmentFrameDateTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAppointmentFrameStartTimeTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAppointmentFrameEndTimeTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAppointmentFrameRecurrenceComboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(addAppointmentFrameConfirmButton)
                .addContainerGap(131, Short.MAX_VALUE))
        );

        editAppointmentFrameLocationTextInput.setText("Location");
        editAppointmentFrameLocationTextInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAppointmentFrameLocationTextInputActionPerformed(evt);
            }
        });

        editAppointmentFrameCategoryTextInput.setText("Category");

        editAppointmentFrameDateTextInput.setText("Date (DD/MM/YYYY)");

        editAppointmentFrameStartTimeTextInput.setText("Start time (hh:mm)");

        editAppointmentFrameEndTimeTextInput.setText("End time (hh:mm)");

        editAppointmentFrameConfirmButton.setText("Confirm");
        editAppointmentFrameConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAppointmentFrameConfirmButtonActionPerformed(evt);
            }
        });

        editAppointmentFrameDescriptionTextarea.setColumns(20);
        editAppointmentFrameDescriptionTextarea.setRows(5);
        editAppointmentFrameDescriptionTextarea.setText("Description");
        jScrollPane2.setViewportView(editAppointmentFrameDescriptionTextarea);

        editAppointmentFrameRecurrenceComboList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Daily", "Weekly", "Two weekly", "Four weekly" }));

        javax.swing.GroupLayout editAppointmentFrameLayout = new javax.swing.GroupLayout(editAppointmentFrame.getContentPane());
        editAppointmentFrame.getContentPane().setLayout(editAppointmentFrameLayout);
        editAppointmentFrameLayout.setHorizontalGroup(
            editAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editAppointmentFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editAppointmentFrameConfirmButton)
                .addGap(41, 41, 41))
            .addGroup(editAppointmentFrameLayout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addGroup(editAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editAppointmentFrameRecurrenceComboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(editAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(editAppointmentFrameLocationTextInput)
                        .addComponent(editAppointmentFrameCategoryTextInput, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                    .addComponent(editAppointmentFrameEndTimeTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editAppointmentFrameStartTimeTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editAppointmentFrameDateTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        editAppointmentFrameLayout.setVerticalGroup(
            editAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editAppointmentFrameLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(editAppointmentFrameLocationTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editAppointmentFrameCategoryTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editAppointmentFrameDateTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editAppointmentFrameStartTimeTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editAppointmentFrameEndTimeTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editAppointmentFrameRecurrenceComboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(editAppointmentFrameConfirmButton)
                .addContainerGap(131, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        commandLineSubmit.setText("Submit");
        commandLineSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandLineSubmitActionPerformed(evt);
            }
        });

        commandLineInput.setText("/");
        commandLineInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandLineInputActionPerformed(evt);
            }
        });

        addAppointmentButton.setText("Add");
        addAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentButtonActionPerformed(evt);
            }
        });

        monthDisplayPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                monthDisplayPaneStateChanged(evt);
            }
        });

        dayDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"8:00", null},
                {"9:00", null},
                {"10:00", null},
                {"11:00", null},
                {"12:00", null},
                {"13:00", null},
                {"14:00", null},
                {"15:00", null},
                {"16:00", null},
                {"17:00", null},
                {"18:00", null},
                {"19:00", null},
                {"20:00", null},
                {"21:00", null},
                {"22:00", null},
                {"23:00", null},
                {"00:00", null},
                {"1:00", null},
                {"2:00", null},
                {"3:00", null},
                {"4:00", null},
                {"5:00", null},
                {"6:00", null},
                {"7:00", null}
            },
            new String [] {
                "Time", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dayDisplayPane.setViewportView(dayDisplayTable);
        dayDisplayTable.getColumnModel().getColumn(0).setMinWidth(60);
        dayDisplayTable.getColumnModel().getColumn(0).setPreferredWidth(60);
        dayDisplayTable.getColumnModel().getColumn(0).setMaxWidth(60);

        monthDisplayPane.addTab("Day", dayDisplayPane);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"8:00", null, null, null, null, null, null, null},
                {"9:00", null, null, null, null, null, null, null},
                {"10:00", null, null, null, null, null, null, null},
                {"11:00", null, null, null, null, null, null, null},
                {"12:00", null, null, null, null, null, null, null},
                {"13:00", null, null, null, null, null, null, null},
                {"14:00", null, null, null, null, null, null, null},
                {"15:00", null, null, null, null, null, null, null},
                {"16:00", null, null, null, null, null, null, null},
                {"17:00", null, null, null, null, null, null, null},
                {"18:00", null, null, null, null, null, null, null},
                {"19:00", null, null, null, null, null, null, null},
                {"20:00", null, null, null, null, null, null, null},
                {"21:00", null, null, null, null, null, null, null},
                {"22:00", null, null, null, null, null, null, null},
                {"23:00", null, null, null, null, null, null, null},
                {"00:00", null, null, null, null, null, null, null},
                {"1:00", null, null, null, null, null, null, null},
                {"2:00", null, null, null, null, null, null, null},
                {"3:00", null, null, null, null, null, null, null},
                {"4:00", null, null, null, null, null, null, null},
                {"5:00", null, null, null, null, null, null, null},
                {"6:00", null, null, null, null, null, null, null},
                {"7:00", null, null, null, null, null, null, null}
            },
            new String [] {
                "Time", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
            }
        ));
        jScrollPane3.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setMinWidth(60);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(60);

        monthDisplayPane.addTab("Week", jScrollPane3);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable2);

        monthDisplayPane.addTab("Month", jScrollPane4);

        jButton1.setText("Prev");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Next");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(commandLineInput, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commandLineSubmit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addAppointmentButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(190, 190, 190))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(monthDisplayPane, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandLineSubmit)
                    .addComponent(commandLineInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addAppointmentButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(monthDisplayPane, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addGap(54, 54, 54))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentButtonActionPerformed
        addAppointmentFrame.setTitle("New appointment");
        addAppointmentFrame.setVisible(true);
    }//GEN-LAST:event_addAppointmentButtonActionPerformed

    private void editAppointmentFrameLocationTextInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAppointmentFrameLocationTextInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editAppointmentFrameLocationTextInputActionPerformed

    private void commandLineInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandLineInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_commandLineInputActionPerformed

    private void editAppointmentFrameConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAppointmentFrameConfirmButtonActionPerformed

        boolean validInput = true;
        String location = editAppointmentFrameLocationTextInput.getText();
        String description = editAppointmentFrameDescriptionTextarea.getText();
        String category = editAppointmentFrameCategoryTextInput.getText();
        String date = editAppointmentFrameDateTextInput.getText();
        String start = editAppointmentFrameStartTimeTextInput.getText();
        String end = editAppointmentFrameEndTimeTextInput.getText();
        String rec = (String) editAppointmentFrameRecurrenceComboList.getModel().getElementAt(editAppointmentFrameRecurrenceComboList.getSelectedIndex());

        int remind = 0;
        
        String[] arrDate = date.split("/");
        String[] arrStartTime = start.split(":");
        String[] arrEndTime = end.split(":");
        
        CalendarDate cDate = new CalendarDate(Integer.parseInt(arrDate[0]), Integer.parseInt(arrDate[1]), Integer.parseInt(arrDate[2]));
        CalendarTime cStart = new CalendarTime(Integer.parseInt(arrStartTime[0]), Integer.parseInt(arrStartTime[1]));
        CalendarTime cEnd = new CalendarTime(Integer.parseInt(arrEndTime[0]), Integer.parseInt(arrEndTime[1]));
       
        Appointment ap = new Appointment(cDate, cStart, cEnd, description.trim(), location, category, Appointment.Recurrence.NONE, remind);
        /*   validInput = CalendarDate.isValidDateString(date);
        validInput = CalendarTime.isValidTimeString(start);
        validInput = CalendarTime.isValidTimeString(end);*/
        if(validInput){
            cal.addAppointment(ap);
            cal.saveCalendar(fileName);
            addAppointmentFrame.setVisible(false);
            JLabel label = new JLabel();
            label.setText(ap.category);
            jTable2.setValueAt(label, 5, 5);
            
           
        }
        else{
            
        }
        
        
         /*example: assume range of dates is between 1st and 30th of November, 2012 in Month tab.
        *need some if statements here to check which tab we're on. Weekly range for week etc
        *
        * 
        * each appointment object should have some click state so it can be edited, removed etc
        * 
        * 
        * a reoccuring appointment will be displayed if it falls within the dates, it should be 
        * colour coded identically, to represent a duplicate of that appointment
        * 
        * 
        * this code should be contained within a function, as a removal will also need to redisplay
        * the calendar view
        * 
        */
        
        //these dates will change dependant on the tab state
        startDate = new CalendarDate(1,11,2012);
        endDate = new CalendarDate(30,11,2012);
        
        
        //get list of appointments between start and end dates
        List<Appointment> a = cal.getAppointmentsBetweenDates(startDate, endDate);
       
        System.out.println("Relevant appointments between " + startDate + " and " + endDate + " :");
        int i =0;
        for(Appointment app : a){
            System.out.print("Appointment number: "  + i + " "+ app);
              //some code to create an appointment box for this in the table
            
            //also get recurrence dates for date range, these need to be displayed 
              List<CalendarDate> recurs = app.getRecurrenceDates(startDate, endDate);
              
              for(CalendarDate d : recurs){
                  System.out.println("This appointment will also be displayed (as a duplicate) on " + d);
                  //some code to create an identical appointment box for this recurrence in the table
              }
            i++;
        }
        
  
    }//GEN-LAST:event_editAppointmentFrameConfirmButtonActionPerformed
 private void populateMonth(GregorianCalendar today) {
        int[] dayOffset = {6,0,1,2,3,4,5};
        for (int x = 0; x < jTable2.getRowCount(); x++) {
            for (int y = 0; y < jTable2.getColumnCount(); y++) {
                 jTable2.setValueAt(null, x, y);
            }
        }
                 
        int dayFix = dayOffset[today.get(Calendar.DAY_OF_WEEK)-1];
        int monthDays = today.getActualMaximum(Calendar.DAY_OF_MONTH); 
        today.set(Calendar.DAY_OF_MONTH, 1);
        int startDay = dayOffset[today.get(Calendar.DAY_OF_WEEK)-1];
        System.out.println(startDay);
        int i = 0;
        for (int x = 0; x < jTable2.getRowCount(); x++) {
            for (int y = startDay; y < jTable2.getColumnCount(); y++) {
                if (i >= monthDays) { break; }
                i++;
                 jTable2.setValueAt(i, x, y);
            }
            startDay = 0;
        }
 }
    private void commandLineSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandLineSubmitActionPerformed
                GregorianCalendar today = new GregorianCalendar();
                currentMonthDate = today;
                populateMonth(today);
    }//GEN-LAST:event_commandLineSubmitActionPerformed

    private void monthDisplayPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_monthDisplayPaneStateChanged

    }//GEN-LAST:event_monthDisplayPaneStateChanged

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        int row = jTable2.rowAtPoint(evt.getPoint());
        int col = jTable2.columnAtPoint(evt.getPoint());        // TODO add your handling code here:
        jTable2.getValueAt(row, col);
        editAppointmentFrame.setTitle("Edit appointment");
        editAppointmentFrame.setVisible(true);
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                currentMonthDate.set(Calendar.MONTH, currentMonthDate.MONTH+1);
                populateMonth(currentMonthDate);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void addAppointmentFrameLocationTextInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentFrameLocationTextInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addAppointmentFrameLocationTextInputActionPerformed

    private void addAppointmentFrameConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentFrameConfirmButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addAppointmentFrameConfirmButtonActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
           @Override
            public void run() {
                IS3Calendar c = new IS3Calendar();
                c.setVisible(true);
                cal.openCalendar(fileName);
                cal.printCalendar();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAppointmentButton;
    private javax.swing.JFrame addAppointmentFrame;
    private javax.swing.JTextField addAppointmentFrameCategoryTextInput;
    private javax.swing.JButton addAppointmentFrameConfirmButton;
    private javax.swing.JTextField addAppointmentFrameDateTextInput;
    private javax.swing.JTextArea addAppointmentFrameDescriptionTextarea;
    private javax.swing.JTextField addAppointmentFrameEndTimeTextInput;
    private javax.swing.JTextField addAppointmentFrameLocationTextInput;
    private javax.swing.JComboBox addAppointmentFrameRecurrenceComboList;
    private javax.swing.JTextField addAppointmentFrameStartTimeTextInput;
    private javax.swing.JTextField commandLineInput;
    private javax.swing.JButton commandLineSubmit;
    private javax.swing.JScrollPane dayDisplayPane;
    private javax.swing.JTable dayDisplayTable;
    private javax.swing.JFrame editAppointmentFrame;
    private javax.swing.JTextField editAppointmentFrameCategoryTextInput;
    private javax.swing.JButton editAppointmentFrameConfirmButton;
    private javax.swing.JTextField editAppointmentFrameDateTextInput;
    private javax.swing.JTextArea editAppointmentFrameDescriptionTextarea;
    private javax.swing.JTextField editAppointmentFrameEndTimeTextInput;
    private javax.swing.JTextField editAppointmentFrameLocationTextInput;
    private javax.swing.JComboBox editAppointmentFrameRecurrenceComboList;
    private javax.swing.JTextField editAppointmentFrameStartTimeTextInput;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTabbedPane monthDisplayPane;
    // End of variables declaration//GEN-END:variables

}

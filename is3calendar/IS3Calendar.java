/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package is3calendar;

import CommandParser.CommandParser;
import calendar_ex.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.table.TableColumn;
import javax.swing.Timer;


/**
 *
 * @author Arthur Bigeard
 */
public class IS3Calendar extends javax.swing.JFrame {
    private static CalendarEx cal;
    private static String fileName;
    private static String displayMode;
    private static String[] categories = null;

    private static CalendarDate startDate;
    private static CalendarDate endDate; 
    private static GregorianCalendar currentMonthDate;
    private static Date currentDayDate;
    private static Date currentWeekDate;
    /**
     * Creates new form Calendar
     */
    public IS3Calendar() {
        cal = new CalendarEx();
        fileName = "events6.ser";
        displayMode = "Day";

        cal.openCalendar(fileName);
        initComponents();

        monthDisplayPane.setSelectedIndex(0);
        //cal.printCalendar();
        GregorianCalendar today = new GregorianCalendar();
        currentMonthDate = today;
        currentDayDate = new Date();
        currentWeekDate = new Date();
        populateMonth(today);
        populateWeek(currentWeekDate);
        populateDay(currentDayDate);
    }
    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addAppointmentFrame = new javax.swing.JFrame();
        addAppointmentFrameLocationTextInput = new javax.swing.JTextField();
        addAppointmentFrameCategoryTextInput = new javax.swing.JTextField();
        addAppointmentFrameDateTextInput = new javax.swing.JTextField();
        addAppointmentFrameStartTimeTextInput = new javax.swing.JTextField();
        addAppointmentFrameEndTimeTextInput = new javax.swing.JTextField();
        addAppointmentFrameConfirmButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        addAppointmentFrameDescriptionTextarea = new javax.swing.JTextArea();
        addAppointmentFrameRecurrenceComboList = new javax.swing.JComboBox();
        addAppointmentFrameNameTextInput = new javax.swing.JTextField();
        addAppointmentFrameReminderTextInput = new javax.swing.JTextField();
        commandLineSubmit = new javax.swing.JButton();
        commandLineInput = new javax.swing.JTextField();
        addAppointmentButton = new javax.swing.JButton();
        monthDisplayPane = new javax.swing.JTabbedPane();
        dayDisplayPane = new javax.swing.JScrollPane();
        dayDisplayTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        weekDisplayTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        monthDisplayTable = new javax.swing.JTable();
        filterDisplayPane = new javax.swing.JTabbedPane();
        statsDisplayPane = new javax.swing.JTabbedPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        addAppointmentFrame.setMinimumSize(new java.awt.Dimension(500, 500));

        addAppointmentFrameLocationTextInput.setText("Location");
        addAppointmentFrameLocationTextInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addAppointmentFrameLocationTextInputMouseClicked(evt);
            }
        });
        addAppointmentFrameLocationTextInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentFrameLocationTextInputActionPerformed(evt);
            }
        });

        addAppointmentFrameCategoryTextInput.setText("Category");
        addAppointmentFrameCategoryTextInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addAppointmentFrameCategoryTextInputMouseClicked(evt);
            }
        });
        addAppointmentFrameCategoryTextInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentFrameCategoryTextInputActionPerformed(evt);
            }
        });

        addAppointmentFrameDateTextInput.setText("Date (DD/MM/YYYY)");
        addAppointmentFrameDateTextInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addAppointmentFrameDateTextInputMouseClicked(evt);
            }
        });

        addAppointmentFrameStartTimeTextInput.setText("Start time (hh:mm)");
        addAppointmentFrameStartTimeTextInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addAppointmentFrameStartTimeTextInputMouseClicked(evt);
            }
        });

        addAppointmentFrameEndTimeTextInput.setText("End time (hh:mm)");
        addAppointmentFrameEndTimeTextInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addAppointmentFrameEndTimeTextInputMouseClicked(evt);
            }
        });

        addAppointmentFrameConfirmButton.setText("Confirm");
        addAppointmentFrameConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentFrameConfirmButtonActionPerformed(evt);
            }
        });

        addAppointmentFrameDescriptionTextarea.setColumns(20);
        addAppointmentFrameDescriptionTextarea.setRows(5);
        addAppointmentFrameDescriptionTextarea.setText("Description");
        addAppointmentFrameDescriptionTextarea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addAppointmentFrameDescriptionTextareaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(addAppointmentFrameDescriptionTextarea);

        addAppointmentFrameRecurrenceComboList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Daily", "Weekly", "Two weekly", "Four weekly" }));

        addAppointmentFrameNameTextInput.setText("Name");
        addAppointmentFrameNameTextInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addAppointmentFrameNameTextInputMouseClicked(evt);
            }
        });
        addAppointmentFrameNameTextInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentFrameNameTextInputActionPerformed(evt);
            }
        });

        addAppointmentFrameReminderTextInput.setText("Reminder (minutes)");

        javax.swing.GroupLayout addAppointmentFrameLayout = new javax.swing.GroupLayout(addAppointmentFrame.getContentPane());
        addAppointmentFrame.getContentPane().setLayout(addAppointmentFrameLayout);
        addAppointmentFrameLayout.setHorizontalGroup(
            addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addGroup(addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                        .addComponent(addAppointmentFrameRecurrenceComboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addAppointmentFrameConfirmButton)
                        .addGap(41, 41, 41))
                    .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                        .addGroup(addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(addAppointmentFrameLocationTextInput)
                                .addComponent(addAppointmentFrameCategoryTextInput, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                .addComponent(addAppointmentFrameNameTextInput, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                            .addComponent(addAppointmentFrameEndTimeTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addAppointmentFrameStartTimeTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addAppointmentFrameDateTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addAppointmentFrameReminderTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        addAppointmentFrameLayout.setVerticalGroup(
            addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(addAppointmentFrameNameTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAppointmentFrameLocationTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAppointmentFrameCategoryTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addAppointmentFrameDateTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAppointmentFrameStartTimeTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAppointmentFrameEndTimeTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(addAppointmentFrameConfirmButton))
                    .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addAppointmentFrameReminderTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(addAppointmentFrameRecurrenceComboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(90, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        commandLineSubmit.setText("Submit");
        commandLineSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandLineSubmitActionPerformed(evt);
            }
        });

        commandLineInput.setText("/");
        commandLineInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandLineInputActionPerformed(evt);
            }
        });

        addAppointmentButton.setText("Add");
        addAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentButtonActionPerformed(evt);
            }
        });

        monthDisplayPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                monthDisplayPaneStateChanged(evt);
            }
        });
        monthDisplayPane.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                monthDisplayPaneFocusGained(evt);
            }
        });

        dayDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"8:00", null},
                {"9:00", null},
                {"10:00", null},
                {"11:00", null},
                {"12:00", null},
                {"13:00", null},
                {"14:00", null},
                {"15:00", null},
                {"16:00", null},
                {"17:00", null},
                {"18:00", null},
                {"19:00", null},
                {"20:00", null},
                {"21:00", null},
                {"22:00", null},
                {"23:00", null},
                {"00:00", null},
                {"1:00", null},
                {"2:00", null},
                {"3:00", null},
                {"4:00", null},
                {"5:00", null},
                {"6:00", null},
                {"7:00", null}
            },
            new String [] {
                "Time", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dayDisplayTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dayDisplayTableMouseClicked(evt);
            }
        });
        dayDisplayPane.setViewportView(dayDisplayTable);
        dayDisplayTable.getColumnModel().getColumn(0).setMinWidth(60);
        dayDisplayTable.getColumnModel().getColumn(0).setPreferredWidth(60);
        dayDisplayTable.getColumnModel().getColumn(0).setMaxWidth(60);

        monthDisplayPane.addTab("Day", dayDisplayPane);

        weekDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {"8:00", null, null, null, null, null, null, null},
                {"9:00", null, null, null, null, null, null, null},
                {"10:00", null, null, null, null, null, null, null},
                {"11:00", null, null, null, null, null, null, null},
                {"12:00", null, null, null, null, null, null, null},
                {"13:00", null, null, null, null, null, null, null},
                {"14:00", null, null, null, null, null, null, null},
                {"15:00", null, null, null, null, null, null, null},
                {"16:00", null, null, null, null, null, null, null},
                {"17:00", null, null, null, null, null, null, null},
                {"18:00", null, null, null, null, null, null, null},
                {"19:00", null, null, null, null, null, null, null},
                {"20:00", null, null, null, null, null, null, null},
                {"21:00", null, null, null, null, null, null, null},
                {"22:00", null, null, null, null, null, null, null},
                {"23:00", null, null, null, null, null, null, null},
                {"00:00", null, null, null, null, null, null, null},
                {"1:00", null, null, null, null, null, null, null},
                {"2:00", null, null, null, null, null, null, null},
                {"3:00", null, null, null, null, null, null, null},
                {"4:00", null, null, null, null, null, null, null},
                {"5:00", null, null, null, null, null, null, null},
                {"6:00", null, null, null, null, null, null, null},
                {"7:00", null, null, null, null, null, null, null}
            },
            new String [] {
                "Time", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(weekDisplayTable);
        weekDisplayTable.getColumnModel().getColumn(0).setMinWidth(60);
        weekDisplayTable.getColumnModel().getColumn(0).setMaxWidth(60);

        monthDisplayPane.addTab("Week", jScrollPane3);

        monthDisplayTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        monthDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        monthDisplayTable.setRowHeight(40);
        monthDisplayTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monthDisplayTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(monthDisplayTable);
        monthDisplayTable.getColumnModel().getColumn(0).setHeaderValue("Monday");
        monthDisplayTable.getColumnModel().getColumn(1).setHeaderValue("Tuesday");
        monthDisplayTable.getColumnModel().getColumn(2).setHeaderValue("Wednesday");
        monthDisplayTable.getColumnModel().getColumn(3).setHeaderValue("Thursday");
        monthDisplayTable.getColumnModel().getColumn(4).setHeaderValue("Friday");
        monthDisplayTable.getColumnModel().getColumn(5).setHeaderValue("Saturday");
        monthDisplayTable.getColumnModel().getColumn(6).setHeaderValue("Sunday");

        monthDisplayPane.addTab("Month", jScrollPane4);
        monthDisplayPane.addTab("Filter", filterDisplayPane);
        monthDisplayPane.addTab("Stats", statsDisplayPane);

        jButton1.setText("Prev");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Next");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jLabel2.setText(".");

        jLabel3.setText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(274, 274, 274)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(commandLineInput, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commandLineSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addAppointmentButton)
                .addGap(190, 190, 190))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(monthDisplayPane, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(199, 199, 199)
                .addComponent(jButton1)
                .addGap(189, 189, 189)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(119, 119, 119))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(376, 376, 376))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandLineSubmit)
                    .addComponent(commandLineInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addAppointmentButton)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(monthDisplayPane, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentButtonActionPerformed
        addAppointmentFrame.setTitle("New appointment");
        addAppointmentFrame.setVisible(true);
    }//GEN-LAST:event_addAppointmentButtonActionPerformed

    private void addAppointmentFrameLocationTextInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentFrameLocationTextInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addAppointmentFrameLocationTextInputActionPerformed

    private void commandLineInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandLineInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_commandLineInputActionPerformed

    private void addAppointmentFrameConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentFrameConfirmButtonActionPerformed

        boolean validInput = true;
        String location = addAppointmentFrameLocationTextInput.getText();
        String name = addAppointmentFrameNameTextInput.getText();
        String description = addAppointmentFrameDescriptionTextarea.getText();
        String category = addAppointmentFrameCategoryTextInput.getText();
        String date = addAppointmentFrameDateTextInput.getText();
        String start = addAppointmentFrameStartTimeTextInput.getText();
        String end = addAppointmentFrameEndTimeTextInput.getText();
        Appointment.Recurrence rec = Appointment.Recurrence.valueOf(((String) addAppointmentFrameRecurrenceComboList.getModel().getElementAt(addAppointmentFrameRecurrenceComboList.getSelectedIndex())).toUpperCase());
        //System.out.println(rec);
        int remind = 0;
        if (addAppointmentFrameReminderTextInput.getText().compareTo("Reminder (minutes)") != 0 &&
                addAppointmentFrameReminderTextInput.getText().length() > 0) {
            remind = Integer.parseInt(addAppointmentFrameReminderTextInput.getText());
        }
        
        String[] arrDate = date.split("/");
        String[] arrStartTime = start.split(":");
        String[] arrEndTime = end.split(":");
        
        CalendarDate cDate = new CalendarDate(Integer.parseInt(arrDate[0]), Integer.parseInt(arrDate[1]), Integer.parseInt(arrDate[2]));
        CalendarTime cStart = new CalendarTime(Integer.parseInt(arrStartTime[0]), Integer.parseInt(arrStartTime[1]));
        CalendarTime cEnd = new CalendarTime(Integer.parseInt(arrEndTime[0]), Integer.parseInt(arrEndTime[1]));
       
        Appointment ap = new Appointment(cDate, cStart, cEnd, name.trim(), description.trim(), location, category, rec, remind);
        /*   validInput = CalendarDate.isValidDateString(date);
        validInput = CalendarTime.isValidTimeString(start);
        validInput = CalendarTime.isValidTimeString(end);*/
        if(validInput){
            categories = null;
            cal.addAppointment(ap);
            cal.saveCalendar(fileName);
            addAppointmentFrame.setVisible(false); 
            if(displayMode == "Month"){
                populateMonth(currentMonthDate);
            }
            else if(displayMode == "Week"){
               populateWeek(currentWeekDate);
            }
            else{
                populateDay(new Date());
            }
        }
        else{
            
        }
        
        
         /*example: assume range of dates is between 1st and 30th of November, 2012 in Month tab.
        *need some if statements here to check which tab we're on. Weekly range for week etc
        *
        * 
        * each appointment object should have some click state so it can be edited, removed etc
        * 
        * 
        * a reoccuring appointment will be displayed if it falls within the dates, it should be 
        * colour coded identically, to represent a duplicate of that appointment
        * 
        * 
        * this code should be contained within a function, as a removal will also need to redisplay
        * the calendar view
        * 
        */
        
        //these dates will change dependant on the tab state
        startDate = new CalendarDate(1,11,2012);
        endDate = new CalendarDate(30,11,2012);
        
        
        //get list of appointments between start and end dates
        List<Appointment> a = cal.getAppointmentsBetweenDates(startDate, endDate, categories);
       
        System.out.println("Relevant appointments between " + startDate + " and " + endDate + " :");
        int i =0;
        for(Appointment app : a){
            System.out.print("Appointment number: "  + i + " "+ app);
              //some code to create an appointment box for this in the table
            
            //also get recurrence dates for date range, these need to be displayed 
              List<CalendarDate> recurs = app.getRecurrenceDates(startDate, endDate);
              
              for(CalendarDate d : recurs){
                  System.out.println("This appointment will also be displayed (as a duplicate) on " + d);
                  //some code to create an identical appointment box for this recurrence in the table
              }
            i++;
        }
        

        
        
    }//GEN-LAST:event_addAppointmentFrameConfirmButtonActionPerformed
    
    private void populateMonth(GregorianCalendar today) {
        int[] dayOffset = {6,0,1,2,3,4,5};
        for (int x = 0; x < monthDisplayTable.getRowCount(); x++) {
            for (int y = 0; y < monthDisplayTable.getColumnCount(); y++) {
                 monthDisplayTable.setValueAt(null, x, y);
            }
        }
        HashMap<Integer,ArrayList<String>> recdates = new HashMap<Integer,ArrayList<String>>();
        int dayFix = dayOffset[today.get(Calendar.DAY_OF_WEEK)-1];
        int monthDays = today.getActualMaximum(Calendar.DAY_OF_MONTH);
        today.set(Calendar.DAY_OF_MONTH, 1);
        int startDay = dayOffset[today.get(Calendar.DAY_OF_WEEK)-1];
        int i = 0;
        
        startDate = new CalendarDate(today.get(Calendar.DAY_OF_MONTH)
                ,today.get(Calendar.MONTH)+1,today.get(Calendar.YEAR));
        endDate = new CalendarDate(monthDays,today.get(Calendar.MONTH)+1,
                today.get(Calendar.YEAR));
        
        //get list of appointments between start and end dates
        System.out.println(startDate + " " + endDate);
        List<Appointment> apps = cal.getAppointmentsBetweenDates(startDate, endDate, categories);
        for (int x = 0; x < monthDisplayTable.getRowCount(); x++) {
            for (int y = startDay; y < monthDisplayTable.getColumnCount(); y++) {
                if (i >= monthDays) { break; }
                i++;
                String s = i+" - ";
                if (recdates.containsKey(i)) {
                    List<String> temwtf = recdates.get(i);
                    //System.out.println(temwtf);
                    for (String gn : temwtf) {
                        s = s + gn + " / ";
                    }
                }
                for (Appointment a : apps) {
                    if (a.date.day == i) {
                        s = s + a.name + " / ";
                        List<CalendarDate> recurs = a.getRecurrenceDates(startDate, endDate);
                        ArrayList<String> tempn = new ArrayList<String>();
                        for(CalendarDate d : recurs){
                            if (recdates.containsKey(d.day)) {
                                ArrayList<String> humm = recdates.get(d.day);
                                for (String s2 : humm) {
                                    if (!tempn.contains(s2)) {
                                        tempn.add(s2);
                                    }
                                }
                            }
                            if (!tempn.contains(a.name)) {
                                tempn.add(a.name);
                            }
                            //System.out.println(d.day + " " + tempn);
                            recdates.put(d.day,tempn);
                            //tempn.clear();
                        }
                        //System.out.println(recdates);
                        
                    }
                    
                    //monthDisplayTable.setValueAt(s2, x, y);
                }
                s = s.substring(0, s.length()-3);
                monthDisplayTable.setValueAt(s, x, y);
            }
            startDay = 0;
        }
        jLabel1.setText(new SimpleDateFormat("MMMM yyyy").format(today.getTime()));
 }
    
    private void populateWeek(Date today) {
        int dateOffset;
        int[] dayArray = {6,0,1,2,3,4,5};
            for (int x = 0; x < weekDisplayTable.getRowCount(); x++) {
                for (int y = 1; y < weekDisplayTable.getColumnCount(); y++) {
                     weekDisplayTable.setValueAt(null, x, y);
                }
            }
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String strDate = dateFormat.format(today.getTime());
        String[] arrDate = strDate.split("/");
        
        dateFormat = new SimpleDateFormat("MMMM yyyy");
        String jLabelDate = dateFormat.format(today.getTime());
        
        int dayOffset = Integer.parseInt(arrDate[0]);
        int monthOffset = Integer.parseInt(arrDate[1]);
        int yearOffset = Integer.parseInt(arrDate[2]);
        Calendar c = Calendar.getInstance();
        c.set(yearOffset, monthOffset, dayOffset);
        int monthMaxDays = c.getActualMaximum(Calendar.DAY_OF_MONTH);
        int i = dayOffset;
        System.out.println(dayOffset);
        CalendarDate begin = new CalendarDate(dayOffset, monthOffset, yearOffset);
        if(dayOffset + 7 > monthMaxDays){
            dayOffset = dayOffset + 7 - monthMaxDays;
            monthOffset ++;
            if(monthOffset > 12){
                monthOffset = 1;
                yearOffset ++;
            }
        }
        else{
            dayOffset += 7;
        }
        
        for (int y = 1; y < weekDisplayTable.getColumnCount(); y++) {

                weekDisplayTable.setValueAt(i, 0, y);
                i++;
                if(i > monthMaxDays){
                    i = 1;
                }


           
        }
        CalendarDate end = new CalendarDate(dayOffset, monthOffset, yearOffset);
        System.out.println(dayOffset);
        ArrayList<Appointment> list = new ArrayList<>();
        list = (ArrayList) cal.getAppointmentsBetweenDates(begin, end, categories);
        for(Appointment ap : list){
            c.set(Calendar.DAY_OF_MONTH, ap.date.day);
            int hour = ap.start_time.hr-8+1;
            if(hour < 0){
                hour = 24 + hour;
            }
            weekDisplayTable.setValueAt(ap, hour, dayArray[c.get(Calendar.DAY_OF_WEEK)-1]);
        }
        
        
        
        jLabel1.setText(jLabelDate + " - Week x");
 }
    
    private void populateDay(Date today) {
        
        for (int x = 0; x < dayDisplayTable.getRowCount(); x++) {
            for (int y = 1; y < dayDisplayTable.getColumnCount(); y++) {
                 dayDisplayTable.setValueAt(null, x, y);
            }
        }
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String strDate = dateFormat.format(today.getTime());
        String[] arrDate = strDate.split("/");
        CalendarDate begin = new CalendarDate(Integer.parseInt(arrDate[0]), Integer.parseInt(arrDate[1]), Integer.parseInt(arrDate[2]));
<<<<<<< HEAD
        ArrayList<Appointment> list = new ArrayList<>();
        list = (ArrayList) cal.getAppointmentsBetweenDates(begin, begin, categories);
=======
        ArrayList<Appointment> list = new ArrayList<Appointment>();
        list = (ArrayList) cal.getAppointmentsBetweenDates(begin, begin);
>>>>>>> e9ac7442f3faf2e79949d8864b1a6f92fab50802
        for(Appointment ap : list){
            int hour = ap.start_time.hr-8;
            if(hour < 0){
                hour = 24 + hour;
            }
          dayDisplayTable.setValueAt(ap, hour, 1);
        }
        jLabel1.setText(strDate);
 }
    private void commandLineSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandLineSubmitActionPerformed
        CommandParser.ParserResults cmd = CommandParser.parse(commandLineInput.getText());
        CommandParser.view cmdV = cmd.commandView;
        CommandParser.type cmdT = cmd.commandType;
        String[] args = cmd.args;
        if(cmdT == CommandParser.type.COMMAND){
            switch(cmdV){
                case ADD :
                    addAppointmentButtonActionPerformed(null);
                    break;
                case DAY :
                    monthDisplayPane.setSelectedIndex(0);
                    monthDisplayPaneStateChanged(null);
                    break;
                case WEEK :
                    monthDisplayPane.setSelectedIndex(1);
                    monthDisplayPaneStateChanged(null);
                    break;
                case MONTH :
                    monthDisplayPane.setSelectedIndex(2);
                    monthDisplayPaneStateChanged(null);
                    break;
                case ERROR :
                    jLabel3.setText("Invalid command. Type /h or /help to display available commands");
                    break;
                case ALL :
                    jLabel3.setText("No category filter on");
                    categories = null;
                    if("Day".equals(displayMode)){
                        populateDay(currentDayDate);
                    }
                    else if("Week".equals(displayMode)){
                        populateWeek(currentWeekDate);
                    }
                    else{
                        populateMonth(currentMonthDate);
                    }
                    break;
            }
        }
        else if(cmdT == CommandParser.type.HASHTAG){
            jLabel3.setText("Currently displaying categories : ");
            categories = new String[args.length];
            System.out.println(categories.length);
            for(int i = 1; i < args.length; i++){
                if(!"".equals(args[i])){
                    categories[i-1] = args[i];
                    jLabel3.setText(jLabel3.getText() + args[i] + " ");
                }
            }
            if("Day".equals(displayMode)){
                populateDay(currentDayDate);
            }
            else if("Week".equals(displayMode)){
                populateWeek(currentWeekDate);
            }
            else{
                populateMonth(currentMonthDate);
            }
        }
        else{
            
        }
    }//GEN-LAST:event_commandLineSubmitActionPerformed

    private void monthDisplayPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_monthDisplayPaneStateChanged
         int i = monthDisplayPane.getSelectedIndex();
         if(i == 0){
             displayMode = "Day";
             populateDay(new Date());
         }
         else if(i == 1){
             displayMode = "Week";
             populateWeek(currentWeekDate);
         }
         else{
             displayMode = "Month";
             populateMonth(new GregorianCalendar());
         }
    }//GEN-LAST:event_monthDisplayPaneStateChanged

    private void monthDisplayTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monthDisplayTableMouseClicked
        int row = monthDisplayTable.rowAtPoint(evt.getPoint());
        int col = monthDisplayTable.columnAtPoint(evt.getPoint());        // TODO add your handling code here:
        System.out.println(row + " " + col);
    }//GEN-LAST:event_monthDisplayTableMouseClicked

    
    /* previous button */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(displayMode.equals("Month")){       
            GregorianCalendar nextMonth = new GregorianCalendar();
            
            nextMonth = currentMonthDate;
            
             if(nextMonth.get(Calendar.MONTH) == 10 && nextMonth.get(Calendar.YEAR) == 2012){
                  jButton1.setEnabled(false);
              }
             
            if (nextMonth.get(Calendar.MONTH) == 0) {
                nextMonth.add(Calendar.YEAR, -1);
                nextMonth.set(Calendar.MONTH, 11);
            } else {
                 nextMonth.add(Calendar.MONTH, -1);
            }
            nextMonth.set(Calendar.DAY_OF_MONTH, 1);
            currentMonthDate = nextMonth;
           
            if(nextMonth.get(Calendar.MONTH) == 7 && nextMonth.get(Calendar.YEAR) == 2013){
                  jButton2.setEnabled(true);
                  populateMonth(nextMonth);
               }else{
                  populateMonth(nextMonth);
            }
        }
<<<<<<< HEAD
        else if(displayMode == "Week"){
           currentWeekDate = new Date(currentWeekDate.getTime()-(7*86400000));
           populateWeek(currentWeekDate);
=======
        else if(displayMode.equals("Week")){
            
>>>>>>> e9ac7442f3faf2e79949d8864b1a6f92fab50802
        }
        else{
           currentDayDate = new Date(currentDayDate.getTime()-86400000);
           populateDay(currentDayDate);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    
        /* next button */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(displayMode == "Month"){ 
                GregorianCalendar nextMonth = new GregorianCalendar();
                nextMonth = currentMonthDate;

               if(nextMonth.get(Calendar.MONTH) == 9 && nextMonth.get(Calendar.YEAR) == 2012){
                    jButton1.setEnabled(true);
                  
                }else if(nextMonth.get(Calendar.MONTH) == 7 && nextMonth.get(Calendar.YEAR) == 2013){
                        jButton2.setEnabled(false);
                }
               if (nextMonth.get(Calendar.MONTH) == 11) {
                   nextMonth.add(Calendar.YEAR, 1);
                   nextMonth.set(Calendar.MONTH, 0);
               } else {
                    nextMonth.add(Calendar.MONTH, 1);
               }
                nextMonth.set(Calendar.DAY_OF_MONTH, 1);
                currentMonthDate = nextMonth;
                
                if(nextMonth.get(Calendar.MONTH) == 9 && nextMonth.get(Calendar.YEAR) == 2013){
                    jButton2.setEnabled(false);
                }else{

                    populateMonth(nextMonth);
                }
        }
        else if(displayMode == "Week"){
           currentWeekDate = new Date(currentWeekDate.getTime()+(7*86400000));
           populateWeek(currentWeekDate);
        }
        else{
           currentDayDate = new Date(currentDayDate.getTime()+86400000);
           populateDay(currentDayDate);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void dayDisplayTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dayDisplayTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_dayDisplayTableMouseClicked

    private void addAppointmentFrameNameTextInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentFrameNameTextInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addAppointmentFrameNameTextInputActionPerformed

    private void monthDisplayPaneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_monthDisplayPaneFocusGained

    }//GEN-LAST:event_monthDisplayPaneFocusGained

    private void addAppointmentFrameNameTextInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addAppointmentFrameNameTextInputMouseClicked
        if (addAppointmentFrameNameTextInput.getText().compareTo("Name") == 0) {
            addAppointmentFrameNameTextInput.setText("");
        }
    }//GEN-LAST:event_addAppointmentFrameNameTextInputMouseClicked

    private void addAppointmentFrameLocationTextInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addAppointmentFrameLocationTextInputMouseClicked
        if (addAppointmentFrameLocationTextInput.getText().compareTo("Location") == 0) {
            addAppointmentFrameLocationTextInput.setText("");
        }
    }//GEN-LAST:event_addAppointmentFrameLocationTextInputMouseClicked

    private void addAppointmentFrameCategoryTextInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentFrameCategoryTextInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addAppointmentFrameCategoryTextInputActionPerformed

    private void addAppointmentFrameCategoryTextInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addAppointmentFrameCategoryTextInputMouseClicked
        if (addAppointmentFrameCategoryTextInput.getText().compareTo("Category") == 0) {
            addAppointmentFrameCategoryTextInput.setText("");
        }
    }//GEN-LAST:event_addAppointmentFrameCategoryTextInputMouseClicked

    private void addAppointmentFrameDescriptionTextareaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addAppointmentFrameDescriptionTextareaMouseClicked
        if (addAppointmentFrameDescriptionTextarea.getText().compareTo("Description") == 0) {
            addAppointmentFrameDescriptionTextarea.setText("");
        }
    }//GEN-LAST:event_addAppointmentFrameDescriptionTextareaMouseClicked

    private void addAppointmentFrameDateTextInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addAppointmentFrameDateTextInputMouseClicked
        if (addAppointmentFrameDateTextInput.getText().compareTo("Date (DD/MM/YYYY)") == 0) {
            addAppointmentFrameDateTextInput.setText("");
        }
    }//GEN-LAST:event_addAppointmentFrameDateTextInputMouseClicked

    private void addAppointmentFrameStartTimeTextInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addAppointmentFrameStartTimeTextInputMouseClicked
        if (addAppointmentFrameStartTimeTextInput.getText().compareTo("Start time (hh:mm)") == 0) {
            addAppointmentFrameStartTimeTextInput.setText("");
        }
    }//GEN-LAST:event_addAppointmentFrameStartTimeTextInputMouseClicked

    private void addAppointmentFrameEndTimeTextInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addAppointmentFrameEndTimeTextInputMouseClicked
        if (addAppointmentFrameEndTimeTextInput.getText().compareTo("End time (hh:mm)") == 0) {
            addAppointmentFrameEndTimeTextInput.setText("");
        }
    }//GEN-LAST:event_addAppointmentFrameEndTimeTextInputMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
           @Override
            public void run() {
                IS3Calendar c = new IS3Calendar();
                c.setVisible(true);
                Timer timer = new Timer(5000, new Reminder(cal));
                timer.start();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAppointmentButton;
    private javax.swing.JFrame addAppointmentFrame;
    private javax.swing.JTextField addAppointmentFrameCategoryTextInput;
    private javax.swing.JButton addAppointmentFrameConfirmButton;
    private javax.swing.JTextField addAppointmentFrameDateTextInput;
    private javax.swing.JTextArea addAppointmentFrameDescriptionTextarea;
    private javax.swing.JTextField addAppointmentFrameEndTimeTextInput;
    private javax.swing.JTextField addAppointmentFrameLocationTextInput;
    private javax.swing.JTextField addAppointmentFrameNameTextInput;
    private javax.swing.JComboBox addAppointmentFrameRecurrenceComboList;
    private javax.swing.JTextField addAppointmentFrameReminderTextInput;
    private javax.swing.JTextField addAppointmentFrameStartTimeTextInput;
    private javax.swing.JTextField commandLineInput;
    private javax.swing.JButton commandLineSubmit;
    private javax.swing.JScrollPane dayDisplayPane;
    private javax.swing.JTable dayDisplayTable;
    private javax.swing.JTabbedPane filterDisplayPane;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane monthDisplayPane;
    private javax.swing.JTable monthDisplayTable;
    private javax.swing.JTabbedPane statsDisplayPane;
    private javax.swing.JTable weekDisplayTable;
    // End of variables declaration//GEN-END:variables
}
